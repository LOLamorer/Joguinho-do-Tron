import glfw
import math
from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *

# Variáveis globais para as posições dos "carrinhos"
x1_posicao = -0.5
y1_posicao = 0.0
x2_posicao = 0.5
y2_posicao = 0.0

window = None  # Variável global para a janela
max_speed = 0.02  # Velocidade máxima dos carrinhos
min_speed = 0.01  # Velocidade mínima dos carrinhos
speed = min_speed  # Velocidade inicial dos carrinhos
keys_pressed = set()  # Armazena as teclas pressionadas

# Listas para armazenar os rastros das motos
rastro_moto1 = []
rastro_moto2 = []

# Limites da tela
left_limit = -1.0
right_limit = 1.0
bottom_limit = -1.0
top_limit = 1.0

# Variável para controlar o estado do jogo
game_state = "jogando"

# Função para verificar a colisão entre dois carrinhos
def check_collision(x1, y1, x2, y2, threshold):
    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) < threshold ** 2

# Função de callback para o teclado
def key_callback(window, key, scancode, action, mods):
    global keys_pressed, speed, game_state
    if game_state == "jogando":
        if action == glfw.PRESS:
            keys_pressed.add(key)  # Adiciona a tecla pressionada ao conjunto
            if key in [glfw.KEY_UP, glfw.KEY_DOWN, glfw.KEY_LEFT, glfw.KEY_RIGHT, glfw.KEY_W, glfw.KEY_S, glfw.KEY_A, glfw.KEY_D]:
                speed = max_speed  # Define a velocidade máxima ao pressionar uma tecla
        elif action == glfw.RELEASE:
            keys_pressed.discard(key)  # Remove a tecla liberada do conjunto
            if len(keys_pressed) == 0:
                speed = min_speed  # Define a velocidade mínima ao soltar todas as teclas

# Função para atualizar as posições dos "carrinhos" e rastros
def update_positions():
    global x1_posicao, y1_posicao, x2_posicao, y2_posicao, rastro_moto1, rastro_moto2, game_state

    if game_state == "jogando":
        step_size = speed  # Ajusta a velocidade conforme a tecla pressionada

        # Atualiza a posição do carrinho 2 (azul)
        if glfw.KEY_UP in keys_pressed and y2_posicao + step_size <= top_limit:
            y2_posicao += step_size
        if glfw.KEY_DOWN in keys_pressed and y2_posicao - step_size >= bottom_limit:
            y2_posicao -= step_size
        if glfw.KEY_LEFT in keys_pressed and x2_posicao - step_size >= left_limit:
            x2_posicao -= step_size
        if glfw.KEY_RIGHT in keys_pressed and x2_posicao + step_size <= right_limit:
            x2_posicao += step_size

        # Atualiza a posição do carrinho 1 (rosa)
        if glfw.KEY_W in keys_pressed and y1_posicao + step_size <= top_limit:
            y1_posicao += step_size
        if glfw.KEY_S in keys_pressed and y1_posicao - step_size >= bottom_limit:
            y1_posicao -= step_size
        if glfw.KEY_A in keys_pressed and x1_posicao - step_size >= left_limit:
            x1_posicao -= step_size
        if glfw.KEY_D in keys_pressed and x1_posicao + step_size <= right_limit:
            x1_posicao += step_size

        # Adiciona as posições atuais às listas de rastros
        rastro_moto1.append((x1_posicao, y1_posicao))
        rastro_moto2.append((x2_posicao, y2_posicao))

        # Verifica colisão entre os carrinhos
        if check_collision(x1_posicao, y1_posicao, x2_posicao, y2_posicao, 0.05):
            game_state = "perdeu"

        # Verifica se o carrinho 1 (rosa) bateu nos limites
        if (x1_posicao - 0.05 < left_limit or x1_posicao + 0.05 > right_limit or
            y1_posicao - 0.02 < bottom_limit or y1_posicao + 0.05 > top_limit):
            game_state = "perdeu"

        # Verifica se o carrinho 2 (azul) bateu nos limites
        if (x2_posicao - 0.05 < left_limit or x2_posicao + 0.05 > right_limit or
            y2_posicao - 0.02 < bottom_limit or y2_posicao + 0.05 > top_limit):
            game_state = "perdeu"

# Função para desenhar um "carrinho"
def draw_car(x, y, color):
    # Corpo do carro
    glColor3f(*color)
    glBegin(GL_POLYGON)
    glVertex2f(x - 0.05, y - 0.02)
    glVertex2f(x + 0.05, y - 0.02)
    glVertex2f(x + 0.05, y + 0.02)
    glVertex2f(x + 0.03, y + 0.05)
    glVertex2f(x - 0.03, y + 0.05)
    glVertex2f(x - 0.05, y + 0.02)
    glEnd()

    # Rodas
    glColor3f(0.0, 0.0, 0.0)  # Cor preta para as rodas
    for dx in [-0.04, 0.04]:
        glBegin(GL_POLYGON)
        for i in range(360):
            angle = i * math.pi / 180
            x_wheel = x + dx + 0.02 * math.cos(angle)
            y_wheel = y - 0.02 + 0.02 * math.sin(angle)
            glVertex2f(x_wheel, y_wheel)
        glEnd()

# Função para desenhar na tela
def draw():
    global rastro_moto1, rastro_moto2, game_state

    glClear(GL_COLOR_BUFFER_BIT)
    glClearColor(0.6, 0.9, 0.6, 1.0)  # Cor de fundo verde clara
    glLoadIdentity()

    draw_car(x1_posicao, y1_posicao, (1.0, 0.5, 0.5))  # Primeiro "carrinho" em rosa
    draw_car(x2_posicao, y2_posicao, (0.0, 0.0, 1.0))  # Segundo "carrinho" em azul

    # Desenhar os rastros
    draw_rastro(rastro_moto1, (1.0, 0.5, 0.5))  # Rastro do primeiro "carrinho" em rosa
    draw_rastro(rastro_moto2, (0.0, 0.0, 1.0))  # Rastro do segundo "carrinho" em azul

    if game_state == "perdeu":
        draw_game_over()

    glfw.swap_buffers(window)

# Função para desenhar o rastro
def draw_rastro(rastro, color):
    glLineWidth(5.0)  # Aumenta a espessura do rastro
    glColor3f(*color)  # Cor do rastro
    glBegin(GL_LINE_STRIP)
    for posicao in rastro:
        glVertex2f(posicao[0], posicao[1])
    glEnd()
    glLineWidth(1.0)  # Restaura a espessura padrão

# Função para desenhar a mensagem de fim de jogo e os botões
def draw_game_over():
    glColor3f(1.0, 0.0, 0.0)  # Cor vermelha para a mensagem
    glRasterPos2f(-0.2, 0.0)
    for char in "Fim de Jogo":
        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, ord(char))

    # Desenhar botões
    draw_button(-0.3, -0.2, 0.3, -0.1, "Novo Jogo")
    draw_button(-0.3, -0.4, 0.3, -0.3, "Sair")

# Função para desenhar um botão
def draw_button(x1, y1, x2, y2, text):
    glColor3f(0.0, 0.0, 0.0)  # Cor preta para o botão
    glBegin(GL_QUADS)
    glVertex2f(x1, y1)
    glVertex2f(x2, y1)
    glVertex2f(x2, y2)
    glVertex2f(x1, y2)
    glEnd()

    # Desenhar o texto do botão
    glColor3f(1.0, 1.0, 1.0)  # Cor branca para o texto
    glRasterPos2f(x1 + 0.05, y1 + 0.03)
    for char in text:
        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, ord(char))

# Função para verificar cliques do mouse nos botões
def mouse_button_callback(window, button, action, mods):
    global game_state, x1_posicao, y1_posicao, x2_posicao, y2_posicao, rastro_moto1, rastro_moto2

    if action == glfw.PRESS and button == glfw.MOUSE_BUTTON_LEFT:
        x, y = glfw.get_cursor_pos(window)
        width, height = glfw.get_window_size(window)
        norm_x = (x / width) * 2 - 1  # Normaliza para -1 a 1
        norm_y = 1 - (y / height) * 2  # Normaliza para -1 a 1 (invertido)

        if game_state == "perdeu":
            # Verifica se o clique foi no botão "Novo Jogo"
            if -0.3 <= norm_x <= 0.3 and -0.2 <= norm_y <= -0.1:
                game_state = "jogando"
                x1_posicao = -0.5
                y1_posicao = 0.0
                x2_posicao = 0.5
                y2_posicao = 0.0
                rastro_moto1 = []
                rastro_moto2 = []
            # Verifica se o clique foi no botão "Sair"
            elif -0.3 <= norm_x <= 0.3 and -0.4 <= norm_y <= -0.3:
                glfw.set_window_should_close(window, True)

# Função de callback para redimensionamento da janela
def framebuffer_size_callback(window, width, height):
    glViewport(0, 0, width, height)

# Função principal
def main():
    global window

    if not glfw.init():
        return

    window = glfw.create_window(800, 600, "Corrida de Carrinhos", None, None)

    if not window:
        glfw.terminate()
        return

    glfw.make_context_current(window)

    # Configurações iniciais do OpenGL
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    gluOrtho2D(-1.0, 1.0, -1.0, 1.0)
    glMatrixMode(GL_MODELVIEW)

    # Configurações de callbacks
    glfw.set_key_callback(window, key_callback)
    glfw.set_mouse_button_callback(window, mouse_button_callback)
    glfw.set_framebuffer_size_callback(window, framebuffer_size_callback)

    # Loop principal
    while not glfw.window_should_close(window):
        update_positions()
        draw()
        glfw.poll_events()

    glfw.terminate()

if __name__ == "__main__":
    main()
